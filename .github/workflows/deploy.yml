name: Deploy to Salesforce

on:
  workflow_call:
    inputs:
      from:
        required: true
        type: string
      to:
        required: true
        type: string
      pr_number:
        required: false
        type: string
    secrets:
      sfdx_token:
        required: true
      slack_webhook_url:
        required: true

jobs:
  deploy-to-salesforce:
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout source code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Install sf cli"
        run: npm install @salesforce/cli --global

      - name: "Install sfdx-git-delta"
        run: echo y | sf plugins install sfdx-git-delta

      - name: "Authenticate using SFDX_AUTH_URL"
        run: echo ${{ secrets.sfdx_token }} | sf org login sfdx-url -s -u

      - name: "Deploy"
        id: deploy
        run: |
          if [ `git diff --name-only ${{ inputs.from }} ${{ inputs.to }} force-app/main/default | wc -l` -ne 0 ]; then
            sf sgd source delta --to "${{ inputs.to }}" --from "${{ inputs.from }}" -o "." -i .forceignore
            sf project deploy start -x package/package.xml -w 60 --ignore-conflicts
          else
            echo "No changes detected in force-app/main/default"
          fi

      - name: "Slack Notify Success"
        if: success() && github.event.pull_request.base.ref == 'main'
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          channel="#github-notifications"
          title=":white_check_mark: Deployment Succeeded"
          body=$(printf "%s" "$PR_TITLE" | sed 's/"/\\"/g')
          if [ -n "${{ inputs.pr_number }}" ]; then
            log_url="<https://github.com/${{ github.repository }}/pull/${{ inputs.pr_number }}|View in GitHub>"
          else
            log_url="<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View in GitHub>"
          fi
          payload=$(jq -n --arg channel "$channel" --arg title "$title" --arg body "$body" --arg log_url "$log_url" '{"channel": $channel, "blocks": [{ "type": "section", "text": { "type": "plain_text", "text": $title }}, { "type": "section", "text": { "type": "plain_text", "text": $body } }, { "type": "section", "text": { "type": "mrkdwn", "text": $log_url } } ]}')
          curl -X POST -H 'Content-type: application/json' --data "$payload" "${{ secrets.slack_webhook_url }}"

      - name: "Slack Notify Failure"
        if: failure()
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          channel="#github-notifications"
          title=":x: Deployment Failed (${{ github.event.pull_request.base.ref }})"
          body=$(printf "%s" "$PR_TITLE" | sed 's/"/\\"/g')
          log_url="<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View logs for more details>"
          payload=$(jq -n --arg channel "$channel" --arg title "$title" --arg body "$body" --arg log_url "$log_url" '{"channel": $channel, "blocks": [{ "type": "section", "text": { "type": "plain_text", "text": $title }}, { "type": "section", "text": { "type": "plain_text", "text": $body } }, { "type": "section", "text": { "type": "mrkdwn", "text": $log_url } } ]}')
          curl -X POST -H 'Content-type: application/json' --data "$payload" "${{ secrets.slack_webhook_url }}"

      - name: "Create Release"
        if: success() && github.event.pull_request.base.ref == 'main'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VER=$(date +%s)
          LATEST_VER=$(gh release view --json tagName | jq -r .tagName)
          gh release create ${VER} --generate-notes --latest --target main --notes-start-tag ${LATEST_VER}
